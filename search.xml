<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[How to Download Videos on Web Pages]]></title>
    <url>%2F2018%2F10%2F21%2FHow-to-download-videos-on-web-pages%2F</url>
    <content type="text"><![CDATA[Have you ever met this kind of situation, you are watching a short video which is very intresting that you want to dowload it, but you can’t find the download button. Today I am going to teach you a method which can dowload the videos on web pages. First, you need to open the “developer tools”, it will be found on the upper right corner for most browsers. Take google browser for example, you will find it according to the picture below. Then according to the arrows in the below picture, select “network” —- “filter” —-type”.mp4” in the searching box —- right click mouse on the .mp4 file —- open in new tab Now, you will find the new tab is playing the video that you want to download, left click the button on the bottom right corner as the picture below, here you are, you will find the download button. For youtube channel you can check this method. Copy the link of the youtube video and input it in a new tab. Add “1s” after youtube in the link and push “Enter” key on your keyboard, for example, your video link is https://www.youtube.com/watch?v=HPQbKTJPsU4, after you add”1s” it should be like this https://www.youtube1s.com/watch?v=HPQbKTJPsU4. You will find you can download the video or audio and you can choose different formats and different clarity.]]></content>
      <categories>
        <category>Internet</category>
      </categories>
      <tags>
        <tag>Internet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes about STM32]]></title>
    <url>%2F2018%2F10%2F15%2FNotes-about-STM32%2F</url>
    <content type="text"><![CDATA[​ On this note, I’m going to record some skills and something that require special attention when I was doing embedded projects. 《STM Community》 Recommend a good MCU learning website 《微雪课堂》 If you want to calculate the size of a string you can use the following method 12 #define COUNTOF(__BUFFER__) (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))HAL_UART_Transmit(&amp;huart6, ch1, (COUNTOF(ch1) - 1), 55); We can use sprintf() to combine different strings or numbers into one string, this string should be in an arry with char type. Besides, we can turn to this artical The different uses of sprintf() 12 sprintf(buf, &quot;CH1: %4d CH2: %4d CH3: %4d CH4: %4d SW1: %1d SW2: %1d \n&quot;, rc.ch1, rc.ch2, rc.ch3, rc.ch4, rc.sw1, rc.sw2);HAL_UART_Transmit(&amp;huart6, (uint8_t *)buf, (COUNTOF(buf) - 1), 55); STM32_UART_DMA_IDLE, If we want to use DMA and IDLE to receive data, then we should open the IDLE interrupt and DMA reciver, what should be noticed is that we can’t open the receiver interrupt of UART or it will always interrupt when receiving data. If UART don’t recive data for a moment, which is the detection time of IDLE interrupt, then the timer will be shut down and the receive completion flag will be positioned, too. About STM32_UART_DMA_IDLE we can read the following article 《STM32 USART串口DMA接收和发送模式》 《STM32使用DMA加串口空闲中断接收数据》 Note: This one is well 《Cube下实现串口+DMA+空闲中断接收不定长数据》 《关于STM32空闲中断》 The when a peripheral interrupt had come, the periphral interrupt will be shut down, so you should turn on it again in the interrupt callback function. If you don’t know the meaning of the Options for target in KEIL, and how to config it, then you can chek this article《工程目标选项配置》 If you had used an RTOS on your MCU, then you need to pay attention to those can’t be interrupted parts, like copy data from FIFO to Buffer or creat a new thread, you should put them into critical region with the following code. 123 taskENTER_CRITICAL();/* Here is the code that can&apos;t be interrupted.*/taskEXIT_CRITICAL(); There is a good way to handle message in a RTOS, you can pack a message into FIFO and then set a semaphore to another thread which is specially for sending messages. You can also set a semaphore after receiving a message and wait for another thread which is specially for unpacking messages. If you want to check a button with your MCU, please don’t use external interrupt, because external interrupts are subtle levels while pushing a button is about 20ms. In this it is about 20ms, the voltage will fluctuate. So it may be triggered for several times in this time. About this problem, I always use polling method, creating a thread to check all buttons specially, the cycle is 10ms, which is very useful because the 10ms’ cycle is a kind of filter. How to config the CAN communication with STM32CubeMX. There are few points need to be noted. About STM32_CAN I will make a detailed record later. Baud rate. If your HCLK is 180, you can config Prescaler to 5, Time Quanta in Bit Segment 1 to 3 times, Time Quanta in Bit Segment 2 to 5 times and ReSynchronization Jump With to 1 time NVIC settings. Don’t forget to config the CAN_TX and CAN_RX interrupts, on this step, you will see two RX interrupts, RX0 and RX1, because CAN reciver contains two receiving mailbox, we can associate the receiver with one of them. Filter setting. About this part I recommend this article 《》 Recive &amp; Send. This part is a little different from the old version library and new version library(after v1.20), we can refer to the demo of HAL library. There are some articles about CAN communication, which have explained it well. 《微雪课堂-STM32CubeMX系列教程12:控制器局域网络(CAN)》 《STM32之CAN – CAN ID过滤器分析》 《再谈STM32的CAN过滤器-bxCAN的过滤器的4种工作模式以及使用方法总结》 （Unfinished…）]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>Embedded</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Build Your Personal Website with Github and Hexo]]></title>
    <url>%2F2018%2F10%2F14%2FHow-to-Build-Your-Personal-Website-with-Github-and-Hexo%2F</url>
    <content type="text"><![CDATA[​ This is my first blog here, I want to record how I build my blog website. My blog is based on Hexo hosted on Github. What is Hexo? ​ Before we started, I’m going to talk something about Hexo. Hexo is a static blog framework based on Node.js, it is independent and very convenient. It can generate static web pages and host them on Github or Heroku. Meanwhile, Hexo is also an open source project on Github – hexojs/hexo. If you want to learn more about Hexo, you can go to the official website of Hexo.As for Github, I think you can not be more familiar with it, so I will not talk too much on this part, but if you want to learn more about Git, You can check this aitical – 《Git使用教程》. Without further ado, let’s get started.(In fact, I don’t know what to say, ha ha ha…) Install Node.js Because Hexo is based on Node.js, so we should install Node.js first. The download adrres is Download | Node.js. After the installation, please check if it is installed or not, you can run the following command in the shell, any path, and if you installed it in a right way, it should return the version of Node.js. 1 node -v In addition, you should check if npm is also installed, because we will use it to install different plugins in the later. Also you can use the following command and it will return the version, too. 1 npm -v Install Hexo Hexo is the framwork of our blog. Before we install Hexo, we need to create a folder which will store all files of this blog project, you can name this folder as “Blog”. After you have created this folder, you need to enter this folder and then push the “shift” key and meanwhile right click the mouse, select the “command line” and run it. For Windows 10 user, you should select the “Powershell” and run it. (Attention: from now, all of our command will run in this folder.) Now, to install Hexo, you should run this command. 1 npm install -g hexo-cli After a little long time for installing Hexo, we need to use the following command to init our blog. 1 hexo init blog Now we can test our blog website use the following commands. 123 hexo new this_is_a_test_articalhexo ghexo s When the above three commands are all excuted, we can open the browser and input the address: localhost:4000 . Then we can see the following images. This is your blog, but now, it just runs on your own computer, and the next steps are to make your blog be hosted on Github. Create a new repository on Github Log in to your Github and create a new repository, what should be pay attention to specially is that the name of this repository should be: your_account_name _of_github.github.io, this is a fixed writing. For example, my repository name is elonhu001.github.io. Push your blog website This step is to push your website to Github, then it will be hosted by Github, when you finish this step, you can enter your website in a browser with this address: your_account_name _of_github.github.io. Now, please open the site configuration file, it is on this directory: Blog/_config.yml. Open it and turn to the end, you will see the “deploy configration options”, you can modify it like the following. 1234 deploy: type: git repo: https://github.com/elonhu001/elonhu001.github.io.git branch: master The repo option should be the address of the repository you just created. To deploy your blog on Github repository, you should install Git plugin with the following command in your root directory. 1 npm install hexo-deployer-git --save Then, you can run the following commands in sequence. 123 hexo clean hexo g hexo d Now, please open your browser and input your blog address: your_account_name _of_github.github.io, you will find your blog is already on line surprisingly. Get your domain name You may think why your website address is a little strange and doesn’t like the others, www.xxxx.com or www.xxxx.cn. That is because you haven’t got your own domain name, so this step is to teach you how to get your own domain name. This is the only one step that you need to pay. There are a lot of places to buy domain name, here I will recommend aliyun, you can register an account and buy your own domain name from here: aliyun_domain_name. Binding your domain name This step is to associate your domain name with your blog address. First, you should go to the console home of your aliyun account and find “Domain” option, select “Domain name list” and select your domain name, click the “Resolve”. Add record Edit record as the picture below. The value is the repository address you created before. Then you need to login your Github again, and enter the repository you created before, click setting to set your domain name and save it. Now, you need to enter this directory: Blog\source , creat a file, input your domain name in it with or without www, name it as CNAME, and save it as all files. Then use the following command to update and deploy your blog. 123 hexo clean hexo g hexo d After you have done all these things above, you can enter your blog website with your own domain name. If you want to make your blog more personal, you can check the official websites of Hexo and Next, you will find more different methods to decorate your blog or introduce some more intersting functions. Summarize about Hexo commands Here is the last part of this article, I am going to make a summary of the Hexo commands. 1234 npm install hexo -g # To install Hexo, -g means globalnpm update hexo -g # To update Hexohexo init # To initialize your bloghexo clean # To clear the cache, if your blog page were normal, you can ignor this command Sohort commands 1234 hexo n &quot;your_artical_name&quot; = hexo new &quot;your_artical_name&quot; # To creat your new arcitalhexo g = hexo generate # To generate your bloghexo s = hexo server # To start the service previewhexo d = hexo deploy # To deploy your blog into Github About hexo server 1234 hexo server # Hexo will monitor the change of files and update automatically without restarting the serverhexo server -s # static modehexo server -p 5000 # To change the porthexo server -i 192.168.1.1 # To make custom IP (Unfinished…)]]></content>
      <categories>
        <category>Internet</category>
      </categories>
      <tags>
        <tag>Internet</tag>
      </tags>
  </entry>
</search>
